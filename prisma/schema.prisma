generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  fullname            String                // lấy name từ Google
  email               String                @unique
  password            String?               // nullable for Google OAuth
  googleId            String?               // for Google OAuth
  firstName           String?               // given_name từ Google
  lastName            String?               // family name từ Google
  avatarUrl           String?               // picture URL từ Google hoặc avt tùy chọn
  isEmailVerified     Boolean               @default(false)
  provider            Provider              @default(LOCAL)
  locate              String?               
  phoneNumber         String                @map("phone_number")
  dateOfBirth         String                @map("date_of_birth")
  status              Status                @default(ACTIVE)
  lastLogin           DateTime?             
  createAt            DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  refreshTokens       RefreshToken[]
  resetToken          ResetPasswordToken[]
  userPosition        UserPosition[]

  @@map("users")
}

model RefreshToken {
  id          String      @id @default(uuid())
  expiresAt   DateTime    @map("expires_at")
  createdAt   DateTime    @default(now())
  lastUsedAt  DateTime?   @map("last_used_at")
  isRevoked   Boolean     @default(false) @map("is_revoked")
  revokedAt   DateTime?   @map("revoked_at")
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?        @map("user_id")

  @@map("refreshTokens")
}

model ResetPasswordToken {
  id            Int         @id @default(autoincrement())
  hashedToken   String      @map("hashed_token")
  expiresAt     DateTime    @map("expires_at")
  createdAt     DateTime    @default(now())
  isUsed        Boolean     @default(false)
  usedAt        DateTime?
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int?        @map("user_id")

  @@map("resetPasswordTokens")
}

model Department {
  id            Int           @id @default(autoincrement())
  name          String        @map("name")
  description   String        @map("description")
  isActive      Boolean       @default(true)
  positions     Position[]

  @@map("departments")
}

model Position {
  id              Int               @id @default(autoincrement())
  title           String            @map("title")
  level           Int               @map("level")
  systemRole      Role
  department      Department?       @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId    Int?              @map("department_id")
  userPosition    UserPosition[]

  @@map("positions")
}

model UserPosition {
  userId          Int
  positionId      Int
  isPrimary       Boolean         @default(false)
  assignedAt      DateTime        @default(now())
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  position        Position?       @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@id([userId, positionId])
  @@map("userPositions")
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}

enum Provider {
  LOCAL
  GOOGLE
  BOTH
}

enum Status {
  ACTIVE
  INACTIVE
}
